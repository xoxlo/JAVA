day10


0. 복습
메소드
	기능
	이름뒤에 소괄호
	단, 키워드 뒤에 소괄호는 메소드가 아니다
	ex) if(조건식)

메소드 선언과 구현(정의)

리턴타입 메소드명(자료형 매개변수명, ...){
	실행할 기능;
	return 리턴값;
}

ex) int add (int num1, int num2){
	int result = num1 + num2;
	return result;
}

메소드의 정의와 사용
1. 메소드를 정의할 때에는 {} 중괄호가 있고 반드시 main 메소드 밖에서 정의한다
2. 메소드를 사용할 때에는 {} 중괄호가 없고 반드시 main 메소드 안에서 사용한다

메소드의 정의 순서
1. 기능을 생각한다
2. 반환타입이 생각나지 않는다면 우선 void로 작성한다
3. 기능에 알맞는 메소드명을 작성한다(가능하면 동사)
4. 매개변수를 생각한다
5. 실행할 문장을 작성한다
6. 리턴값을 생각한다
7. 리턴값의 자료형에 맞는 자료형으로 반환타입을 바꿔준다

+)
1. return 타입이 있는 경우 하나의 값으로 볼 수 있다
2. 메소드는 기능을 저장하는 것이라고 볼 수 있다

메소드의 종류
	
	매개변수	리턴값(반환값)
1)	  X	    X
2)	  O	    O
3)	  O	    X
4)	  O	    O

메소드를 사용하는 이유
1. 중복된 코드의 제거
2. 높은 재사용성
3. 유지보수에 유리함


오버로딩
같은 클래스 네에서 생성자 또는 메소드를 같은 이름으로
매개변수의 타입이나 수만 다르게 만든다
반환타입은 오버로딩에 영향을 주지 않는다


1. 클래스
객체지향프로그래밍
: 추상화된 클래스로 객체를 만들고 객체들 간의 관계를 맺어 상호작용하는 프로그래밍 기법
=> 객체가 주인공

추상화(객체 모델링)
공통적인 특징을 파악하여 하나의 묶음으로 만들어 내는 것

변수 : 하나의 값과 하나의 타입만 저장 가능
배열 : 하나의 타입과 여러개의 값을 저장 가능
메소드 : 기능을 저장
클래스 : 여러개의 타입과 여러 개의 값 여러개의 기능을 저장하기 위해 사용하는 것


클래스
1. 사용자 정의 타입(자료형)
	클래스를 사용하면 여러 타입, 여러 값을 저장할 수 있는 저장공간을 만들 수 있다.
	클래스 안에 선언된 변수를 사용하고 싶다면 해당 클래스 타입으로 변수를 선언해야한다
	(클래스의 객체화)
	ex) int num1 = 10;
	    클래스명 객체명 = new 클래스명();

2. 연관성 있는 저장공간과 기능을 한 곳에 모아 편하게 관리할 수 있는 것

3. 객체를 생성하기 위한 틀, 설계도
	공통되는 속성(변수)과 행위(메소드)를 한 번만 선언해 놓고
	가져다 사용만 하도록 설게한다
	추상적인 것(클래스) 구체화 시키면(메모리에 생성된 것) 객체라고 한다


클래스와 객체
	class : 똑같은 무엇인가를 계속 만들어 낼 수 있는 설계도면(붕어빵 틀)
	object(객체) : 클래스에 의해서 만들어진 결과물(팥붕어빵, 슈크림붕어빵, ...)
	
	붕어빵 틀과 붕어빵, 붕어빵틀 하나의 틀에서 나왔지만 붕어빵 하나하나는 별도의 객체
	붕어빵을 만드는 재료가 붕어빵의 맛을 결정하듯 객체는 속성값에 따라 고유한
	특징을 갖게 됨
	- 객체는 속성(상태, 특징)을 가지고 있으며 행위(행동, 기능)를 할 수 있는 대상
	- 객체의 속성은 변수(필드)로 구현, 행위는 메소드로 구현
	- 객체를 만들기 위해서는 클래스가 반드시 선언되어야함
	- 클래스를 통해서 객체를 만들고 활용할 수 있는 프로그래밍 언어를
	  객체지향프로그래밍 언어라고 함

	객체(Object) / 인스턴스(Instance)
		정의한 클래스를 실제조 이용하기 위해 사용
		클래스로부터 생성되는 각각의 존재가 인스턴스

클래스 선언
class 클래스명{
	변수;	// 필드, 멤버변수, 전역변수
	메소드(){}	// 멤버 메소드
	// 클래스를 구성하는 모든 변수, 메소드를 합쳐서 멤버
}

객체화
객체를 만드는 작업, 추상적인 개념을 구체화시키는 작업
클래스명 객체명 = new 클래스명();


생성자
클래스 이름 뒤에 소괄호() 있는 형태, 메소드와 비슷하지만 메소드라고 부르지 않는다
생성자는 리턴이라는 기능이 존재하지 않는다
1. 객체를 생성할 때 실행되는 코드가 작성되어 있다
2. 주로 해당 클래스의 필드(멤버변수)를 초기화 하는 목적으로 사용한다

기본 생성자
public 클래스명(){}
매개변수가 없다
클래스 선언시 자동으로 선언되며, 사용자가 직접 생성자를 선언하게 되면
자동으로 만들어 주지 않는다

this
객체 자기 자신을 의미한다 -> 객체 자신의 주소값을 담고 있다
this는 자동생성되는 변수

this()
* 자기 자신의 생성자를 의미한다 *
생성자 내부에서만 사용가능하며 최상단에 작성해야함