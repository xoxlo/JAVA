day05

0. 복습
접근 제한자
변수, 메소드, 클래스의 접근 권한을 제어하는 것
default : 다른 패키지에서 접근 불가
(별도로 명시하지 않고 접근 제한자 생략시 자동으로 default)

public : 같은 프로젝트 내 접근 가능, 대표 클래스를 의미할 때 사용
protected : 다른 패키지에서 접근 불가, 자식 클래스만 허용. 상속 받을 시에 접근 가능
private : 다른 클래스에서 접근 불가, 같은 클래스만 접근 가능
	-> getter, setter 메소드로만 접근 가능
	사용자에게 내부 원리는 감추고 사용법만 외부로 노출시키는 것
	(캡슐화, 은닉화)


Casting
타입변환 종류
1. 자료형(타입) 변환
	자동 형변환	ex) double num = 10; -> 10.0
	강제 형변환	ex) int num = (int)10.0; -> 10

2. 클래스의 객체 타입 변환(casting)
	: 서로 상속 관계에 있는 클래스 사이에서만 변환 가능
	
	(1) up casting : 자식 값을 가지고 있는 참조변수를 부모 타입으로 형변환(자동 형변환)
		* 자식클래스 타입의 객체는 부모클래스 타입도 동시에 갖기 때문

	(2) down casting : 이미 up casting된 값을 자식 타입으로 형변환
		* 부모의 값을 자식 타입으로 형변환 시 오류 발생

	객체 간 타입 비교(instanceof) :
		a instanceof A : a가 A타입을 가지면 true, false

Casting을 사용하는 이유
부모타입인 하나의 저장공간에 여러 자식타입의 참조값을 Up Casting해서 저장할 수 있다
(참조변수의 다형성)
만약 하나의 기능을 하는 메소드를 만들 때 매개변수로 여러 자식을 받아야 한다고 가정해보자
- Casting이 없었다면 자식타입을 매개변수로 받는 메소드를 타입별로 각각 만들어야한다
	(자식끼리는 타입이 다르기 때문)
- Casting을 활용하면 부모타입의 매개변수를 가진 하나의 메소드만 만들면 된다

** 주의 사항 **
1. Up Casting으로 자식 참조값을 저장했다면 자식클래스에 Override한 기능이 실행된다
2. Up Casting으로 자식 참조값을 저장했다면 자식클래스에서 새로 구현한 기능들을 사용할 수 없다


* 다형성 *
- 하나의 것이 여러 가지 형태를 가질 수 있는 성질
1. 오버로딩
	같은 클래스 내에서 생성자 또는 메소드를 같은 이름으로
	매개변수의 타입이나 수만 다르게 만든다
2. 오버라이딩
	부모 클래스에서 선언한 메소드를 자식 클래스에서 수정하고자 할 때
	부모 클래스와 동일한 이름으로 선언, 재정의
3. 참조변수의 다형성(매개변수의 다형성)
   부모 클래스의 타입의 참조변수로 자식 클래스 객체를 가리키는 것을 허용함
