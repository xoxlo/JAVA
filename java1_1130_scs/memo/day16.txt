day06

Casting
타입변환 종류
1. 자료형(타입)변환
2. 클래스의 객체 타입 변환(casting)
	: 서로 상속 관계에 있는 클래스 사이에서만 변환 가능
	
	(1) up casting : 자식 값을 부모 타입으로 형변환(자동 형변환)
		* 자식클래스 타입의 객체는 부모클래스 타입도 동시에 갖기 때문에
	(2) down casting : 이미 up casting된 값을 자식 탕비으로 형변환
		* 부모의 값을 자식 타입으로 형변환 시 오류

	객체 간 타입 비교(instance of)
		a instanceof A : a가 A타입이면 true, 아니면 false


Casting을 사용하는 이유
부모타입인 하나의 저장공간에 여러 자식타입의 참조값을 up casting하여 저장할 수 있다
(참조변수의 다형성)
만약 하나의 기능을 하는 메소드를 만들 때 매개변수로 여라 자식타입을 받아야 한다고 가정해보자
- casting이 없었다면 자식타입을 매개변수로 받는 메소드를 타입별로 각각 만들어야 한다
  (자식끼리는 타입이 다르기 때문)
- Casting을 활용하면 부모타입의 매개변수를 가진 하나의 메소드만 만들면 된다
  (부모타입의 참조변수로 모든 자식타입을 저장할 수 있기 때문)

** 주의사항 **
1. up casting으로 자식 참조값을 저장했다면 자식 클래스의 Override(재정의)한
   기능이 실행된다
2. Up casting으로 자식 참조값을 저장했다면 자식 클래스에 새로 구현한 기능은 사용할
   수 없다. down casting을 통해서 복구하고 사용한다


다형성
: 하나의 것이 여러 가지 형태로 가질 수 있는 성질
1. 오버로딩
	같은 클래스 안에서 생성자 또는 메소드를 같은 이름으로
	매개변수의 타입이나 수만 다르게 한다
2. 오버라이딩
	부모 클래스에서 선언한 메소드를 자식 클래스에서 수정하고자 할 때
	부모 클래스와 동일한 이름으로 선언, 재정의

3. 참조변수의 다형성(매개변수의 다형성)
	부모클래스 타입의 참조변수로 자식클래스 객체를 가리키는 것을 허용함


추상클래스

추상메소드
- 메소드를 선언만하고 구현을 하지 않은 것을 추상 메소드라고 한다(미완성된 메소드)
	일반 메소드
	void method(){
		실행코드;
	}
	추상 메소드
	void method();
	abstract 리턴타입 메소드명(매개변수, ...);

1. abstract 키워드를 사용한다
2. 마지막에 세미콜론을 써야한다

추상 클래스
- 추상 메소드가 한개 이상 있는 클래스는 "반드시" 추상 클래스로 선언해야 한다
  (미완성된 클래스)
- abstract 키워드가 붙은 클래스

추상 클래스 선언
abstract class 클래스명 {
	abstract 리턴타입 메소드명(매개변수, ...);
}
1. abstract 키워드를 사용한다
2. 객체화 시킬 수 없다

※ 미완성된 메소드(추상 메소드)는 상속받은 자식 클래스에서 "반드시!" 재정의하여
   구현을 해야만 해당 자식 클래스를 객체화 할 수 있다
   그러므로 [강제성]을 부여하기 위해서 추상 메소드로 선언한다
   
추상 클래스를 사용하는 이유
공통되는 속성과 행위를 추상화하여 부모클래스를 만드는데 반드시 모든 자식클래스에서
구현해야하는 메소드가 있다면 추상메소드로 선언하는게 좋다
추상 클래스를 자식 클래스는 추상 메소드를 오버라이딩 하지 않으면 오류가 발생하므로
[강제성]이 생기게 된다
만약 부모 클래스에서 일반 메소드를 구현 한다면 강제성 없으므로 자식 클래스를
만드는 개발자가 재정의하지 않고 그냥 넘어 갈 수 있다

인터페이스(interface)
일종의 추상 클래스이지만 클래스라고 부르지 않으며 추상화의 정도가 높다
멤버로는 상수와 추상메소드만 가질 수 있다
인터페이스는 객체화 할 수 없으며, 인터페이스는 다른 클래스에서 구현(implements)해서
사용한다 (상속과 비슷하다)
구현할 때에는 implements 키워드를 사용한다

인터페이스의 선언
interface 인터페이스명 {
	멤버 선언;
}

인터페이스의 멤버
1. 모든 필드는 public static final이다. (생략해도 자동으로 붙음)
2. 모든 메소드는 public abstract이다. (생략해도 자동으로 붙음)


클래스 상속과 인터페이스의 구현
1. 클래스는 단일 상속만 가능하며 인터페이스는 다중 구현이 가능하다
2. 상속과 구현은 별개이다
   즉, 하나의 클래스에 상속과 구현을 동시에 할 수 있다
3. 인터페이스는 인터페이스를 상속(extends)할 수 있다

인터페이스를 사용하는 이유
1. 여러 클래스에서 선언할 멤버들을 일관되게 하기 위해서 사용한다(표준화)
2. 관계없는 클래스들을 그룹화 시킬 수 있다(마커 인터페이스)
