day08

0. 복습

인터페이스의 불편함
인터페이스는 강제성이 강하기 때문에 구현하는 클래스에서 일부만 재정의하여 사용하는게 불가능하다
이를 해결하기 위해 Adapter라는 추상 클래스를 사용한다

모든 강제성	 일부 강제성
[인터페이스] -> [Adapter 클래스] -> 자식 클래스
	  구현 		     상속

어댑터 클래스의 이름은 이름뒤에 Adapter를 붙여서 목적을 알려준다

마커 인터페이스(Marker Interface)
클래스들을 그룹화하기 위한 목적으로 사용한다
서로 다른 클래스들을 공통되는 타입을 갖도록 하는 것이 유일한 목적이기 때문에
마커 인터페이스는 어떠한 멤버도 선언하지 않는다

			동물
		육식동물			초식동물
	호랑이		독수리		말

내부 클래스(Inner Class)

클래스
	필드
	메소드
	생성자
	클래스

내부 클래스 : 클래스 내부에서 선언된 클래스
외부 클래스 : 내부 클래스를 가진 클래스
내부 클래스로 선언된 클래스는 외부 클래스를 상속받지 않아도 외부 클래스의 멤버들 사용 가능
외부 클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능하므로
내부 클래스만 별도로 사용하지 못한다

※ 메소드 안에서 클래스를 선언할 수 있다

내부 클래스는 안드로이드 앱개발에 사용되나 웹개발에서는 많이 쓰이지 않음
-> 익명 클래스에서 내부 클래스 개념이 나오기 때문에 알고 있어야 함

내부 클래스 종류
1. 인스턴스 내부 클래스
2. 스태틱 내부 클래스
3. 로컬 내부 클래스


익명 클래스(Anonymous Class)
- 이름이 없는 클래스이다
- 미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다

익명 클래스 구현 방법
1) 필드에 익명자식 객체를 생성
2) 지역변수의 초기값으로 대입
3) 익명 객체 매개변수로 대입


함수형 인터페이스(Functional Interface)
단 하나의 추상 메소드를 가지고 있는 인터페이스
@FunctionalInterface라는 어노테이션을 명시해주면 하나의 추상 메소드만 선언할 수 있게
제한한다


람다식(Lambda Expresion) : 익명 메소드

식(Expression)과 문(Statement)
식 : 값으로 평가될 수 있는 것, 하나의 값
	식은 값이기 때문에 변수에 저장할 수 있고 매개변수로 넘겨 줄 수있다 (인수로써)
	1
	1 + 1

문(명령문) : 하나의 동작, 변수 선언 및 할당, 조건문, 반복문
	값이 아니기 때문에 변수에 저장할 수 없고 매개변수로 넘겨줄 수 없다
	문은 식을 포함할 수 있다
	ex) int num = 10 + 10;
	문은 ;(세미콜론)으로 끝난다 !

	if
	if ~ else if
	for


- 자바 8버전부터 사용 가능하다
- 메소드를 하나의 식으로 표현한다
- 람다식을 매개변수로 전달 가능하며, 반환도 가능하다
- 함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 람다식으로 재정의 할 때
  메소드 이름이 필요 없다

일반 메소드의 형태

리턴타입 메소드명(자료형 매개변수){
	실행할 문장;
	return
}

람다식 문법

(매개변수명, ...) -> {
	실행할문장;
}

매개변수명 -> 실행할 문장;

람다식 문법
1. 매개변수가 하나인 경우 자료형 괄호를 생략할 수 있다
2. 매개변수가 두 개 이상인 경우 괄호를 생략할 수 없다
3. 실행할 문장이 한 문장일 경우 중괄호를 생략할 수 있다
4. 실행할 문장이 한 문장이라도 return문일 경우 중괄호 생략할 수 없다
5. 실행할 문장이 한 문장이고 리턴값이 있는 경우 return과 중괄호 모두 생략할 수 있다

** 람다식은 아무대서나 사용 가능한 것은 아니다
   사용하기 위해서는 함수형 인터페이스가 필요하다 !

내부 클래스 -> 익명 -> 람다