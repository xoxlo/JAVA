
1. 클래스
객체지향 프로그래밍
: 추상하된 크랠스로 객체를 만들고 객체들 간의 관계를 맺어 상호작용하는 프로그래밍 기법
=> 객체 주인공

추상화(객체 모델링)
공통적인 특징을 파악하여 하나의 묶음으로 만들어내는 것

변수 : 하나의 값과 하나의 타입만 저장 기능
배열 : 하나의 타입과 여러 개의 값을 저장 기능
클래스 : 여러 개의 타입과 여러 개의 값을 저장하기 위해 사용하는 것


클래스
1. 사용자 정의 타입이다(자료형)
	int num = 10;
	클래스명 객체명 = new 클래스명(); // 'new' 키워드 : 만드려고 하는 객체를 위한 메모리 공간을 할당
	클래스를 사용하면 여러 타입, 여러 값을 저장할 수 있는 저장공간을 만들 수 있다

2. 연관성 있는 저장공간과 기능을 한 곳에 모아 편하게 관리할 수 있는 것

3. 객체를 생성하기 위한 틀, 설계도
	공통되는 속성(변수)과 행위(메소드)를 한번만 선언해 놓고 가져다 사용만 하도록
	설계한다. 추상적인(클래스) 것을 구체화 시키면 객체라고 한다

클래스와 객체
	class : 똑같은 무엇인가를 계속 만들어 낼 수 있는 설계도면(붕어빵 틀)
	객체(object) : 클래스에 의해서 만들어진 결과물(팥붕어빵, 슈크림붕어빵, ...)
	붕어빵 틀과 붕어빵, 붕어빵틀 하나의 틀에서 나왔지만 붕어빵 하나하나는 별도의 객체
	붕어빵을 만드는 재료가 붕어빵의 특징을 결정하듯 객체는 지정한 속성 값에 따라 고유한
	특징을 가지게 됨
	- 객체는 속성(상태, 특징)을 가지고 있으며 행위(기능)를 할 수 있는 
	- 객체 속성은 변수(필드)로 구현, 행위(기능)는 메소드로 구현
	- 객체를 만들기 위해서 클래스가 반드시 선언되어야함
	- 클래스를 통해서 객체를 만들고 활용할 수 있는 프로그래밍 언어를
	  객체지향프로그래밍 언어라고 함

객체(Object) / 인스턴스(Instance)
	정의한 클래스를 실제로 이용하기 위해 사용
	클래스로부터 생성되는 각각의 존재가 인스턴스

클래스 선언
class 클래스명 {
	변수; // 멤버변수, 필드, 전역변수
	
	메소드(){} // 멤버메소드
	// class를 구성하는 멤버 : 필드, 메소드
}

객체화
객체를 만드는 작업, 추상적인 개념을 구체화 시키는 작업

클래스명 객체명 = new 클래스명();
Student st1 = new Student();

객체 사용 방법
객체명.멤버명
.(마침표) : 하위연산자, 멤버 접근 연산자(~의, ~안에)

생성자
클래스 이름 뒤에 소괄호 있는 형태, 메소드와 비슷하지만 메소드라고 부르지 않는다
생성자는 리턴이라는 기능이 존재하지 않는다
1. 객체를 생성할 때 실행되는 코드가 작성 되어 있다
2. 주로 해당 클래스의 필드(멤버 변수)를 초기화 하는 목적으로 사용한다


this
객체 자기 자신을 의미한다 -> 객체 자신의 주소값을 담고있다.

this()
자기자신의 생성자를 의미한다
생성자 내부에서만 사용가능하며 최상단에 작성해야함