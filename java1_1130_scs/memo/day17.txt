day07

0. 복습
추상 클래스
	- abstract 키워드가 붙은 클래스
	- 추상 메소드가 한개 이상 있는 클래스는 반드시 추상 클래스로 선언해야한다.
	(미완성된 클래스)

추상 메소드
	- 메소드를 선언만하고 구현을 하지 않은 것(미완성된 클래스)
	- ex) abstract 리턴타입 메소드명(매개변수, ...);


** 미완성된 메소드(추상 메소드)는 상속받은 자식 클래스에서 반드시 재정의하여
   구현을 해야만 해당 자식 클래스를 객체화 할 수 있다.
   그러므로 [강제성]을 부여하기 위해서 추상 메소드로 선언한다.

추상 클래스를 사용하는 이유
	공통되는 속성과 행위를 추상화하여 부모클래스를 만드는데 반드시
	모든 자식클래스에서 구현해야하는 메소드가 있다면 추상메소드로 선언하는게 좋다
	만약 부모클래스에서 일반 메소드를 구현한다면 강제성이 없으므로 자식클래스를
	만드는 개발자가 재정의하지 않고 그냥 넘어 갈 수 있다

인터페이스(interface)
일종의 추상 클래스이지만 클래스라고 부르지 않으며 추상화의 정도가 높다
멤버로는 상수와 추상메소드만 가질 수 있다
인터페이스는 객체화 할 수 없으며, 인터페이스는 다른 클래스에서 구현(implements)
해서 사용한다(상속과 비슷하다)

인터페이스의 멤버
1. 모든 필드는 public static final이다 (생략해도 자동으로 붙음)
2. 모든 메소드는 public abstract이다 (생략해도 자동으로 붙음)


클래스 상속과 인터페이스의 구현
1. 클래스는 단일 상속만 가능하며 인터페이스는 다중 구현이 가능하다
2. 상속과 구현은 별개이다
	즉, 하나의 클래스에서 상속과 구현을 동시에 할 수 있다
3. 인터페이스는 인터페이스를 상속(extends)할 수 있다


인터페이스를 사용하는 이유
1. 여러 클래스에서 선언할 멤버들을 일관되게 하기 위해 사용한다(표준화)
2. 관계없는 클래스들을 그룹화 시킬 수 있다(마커 인터페이스)


인터페이스의 불편함
인터페이스는 강제성이 강하기 때문에 구현하는 클래스에서 일부만 재정의하는게 불가능하다
이를 해결하기 위해 Adapter라는 추상 클래스를 사용한다

모든 강제성	  일부 강제성
[인터페이스] -> [Adapter 클래스(추상)] -> [자식클래스]
	  구현			  상속

인터페이스의 강제성을 어댑터 클래스를 통해 없애주고 이 어댑터 클래스를
자식클래스에서 상속받아 필요한 메소드만 자식클래스에서 재정의하여 사용한다
어댑터 클래스의 이름뒤에 Adapter를 붙여서 '목적'을 알려준다

다중상속
여러 부모 클래스를 상속하는 것
java에서는 모호성 때문에 다중 상속을 지원하지 않음
JDK8버전 부터 인터페이스에 default 메소드를 선언을 허용하며
여러개를 지정할 수 있는 인터페이스 특성상 다중상속을 지원하는 것과 다름이 없다

인터페이스에 추가된 기능(JDK8부터 추가됨)
1. default 메소드를 선언할 수 있다
	default 리턴타입 메소드명(매개변수){
		실행할 코드;
	}

2. static 메소드를 선언할 수 있다
	static 리턴타입 메소드명(매개변수){
		실행할 코드;
	}

	객체없이 인터페이스만으로도 호출이 가능 인터페이스명.메소드로 호출
	Override 불가능

3. private 메소드(JDK9부터 사용가능)


모호성(ambiguity)
하나의 자식이 여러 부모를 상속 받을 때 서로 다른 부모 클래스에 동일한
이름의 멤버가 있다면, 어떤 부모의 멤버인지 알 수가 없다

모호성 해결방법 예시
1. 두 개 인터페이스에 같은 메소드(이름, 매개변수, 리턴타입이 같은 메소드)가
   선언되어 있는 경우
   -> 자식 클래스에서 재정의하여 사용한다
2. 부모 클래스의 메소드와 인터페이스의 디폴트 메소드가 같은 경우
   -> 부모 클래스의 메소드가 사용된다

※ 인터페이스도 타입이다. 인터페이스는 부모이고 구현한 클래스가 자식


마커 인터페이스(Marker Interface)
클래스들을 "그룹화" 하기 위한 목적으로 사용한다
서로 다른 클래스들을 공통되는 타입을 갖도록 하는 것이 유일한 목적이기 때문에
마커 인터페이스는 어떠한 멤버도 선언하지 않는다

			동물
	초식동물				육식동물
	  말				독수리
					호랑이

 
리턴타입이 인터페이스라는 것은 해당 메소드에서 인터페이스를 구현한 클래스의 인스턴스를 반환한다는 것
