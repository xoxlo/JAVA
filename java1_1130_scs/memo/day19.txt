day09

0. 복습

내부 클래스

클래스
	필드
	메소드
	클래스

내부 클래스 : 클래스 내부에 선언된 클래스
외부 클래스 : 내부클래스를 가진 클래스
내부 클래스로 선언된 클래스는 외부 클래스를 상속받지 않아도 외부 클래스의 멤버들 사용가능
내부 클래스 별도로 사용하지 못한다
=> 외부 클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능하므로
※ 메소드 안에서 클래스를 선언할 수 있다

익명 클래스에서 내부 클래스 개념이 나오기 때문에 알고 있어야 함

내부 클래스의 종류
1. 인스턴스 내부 클래스
2. 스태틱 내부 클래스
3. 로컬 내부 클래스

익명 클래스
- 이름이 없는 클래스이다
- 미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다

함수형 인터페이스
단 하나의 추상 메소드를 가지고 있는 인터페이스
@FunctionalInterface라는 어노테이션을 명시해주면 하나의 추상 메소드만
선언할 수 있게 제한한다

람다식 : 익명 메소드
- 메소드를 하나의 식으로 표현한다
- 람다식을 매개변수로 전달 가능하며, 변환도 가능하다
- 함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 람다식으로 재정의 할 때
  메소드 이름이 필요 없다

** 아무대서나 사용 가능한 것은 아니다 !
   함수형 인터페이스가 필요하다 !


1. 예외처리

오류의 종류
- 에러(Error) : 개발자가 해결할 수 없는 문제 (코드로 수습 불가)
- 예외(Exception) : 개발자가 해결 가능한 문제 (코드로 수습 가능)

예외의 발생 시점
- 확인된 예외(checked exception) : 컴파일 단계에서 발생하는 예외(이클립스 빨간줄)
- 미확인 예외(unchecked exception) : 프로그램 실행 중(런타임) 발생하는 예외

예외 처리
예상되는 예외를 적절히 처리하여 비정상적인 종료를 막는다

예외 처리 문법
try{
	예외가 예상되는 코드;
}catch(예외클래스명 변수명){
	예외 발생시 실행할 코드;
}catch(예외클래스명 변수명){
	예외 발생시 실행할 코드;
}
.....
}finally{
	오류 발생 여부에 상관없이 무조건 실행할 코드;
}

자바의 오류
자바에서는 발생할 수 있는 오류를 클래스로 정의해 두었다
만약 실행 중 오류가 발생하면 해당 오류 클래스의 객체가 생성된다(메모리에 할당된다)
예외처리를 해두었다면 그 객체의 주소를 catch문의 참조변수가 받게된다

예외클래스에서 제공하는 메소드
1. getMessage() : 예외 메세지를 문자열로 반환함
2. printStackTrace() : 예외 발생 지점을 추적하여 단계별로 전부 출력함
3. toString() : 발생한 예외 객체를 문자열로 반환함
   **toString()은 생략 가능함 -> 참조변수를 출력하면 toString()이 자동으로 사용됨

throws 와 throw
	- throws : 예외 던지기
	메소드 선언부에 작성한다
	메소드에서 발생할 수 있는 오류를 정의할 때 처리하지 않고
	해당 메소드를 사용하는 쪽으로 던져서 사용하는 개발자가 처리하도록 한다
	(상황에 맞게 처리하기 위함)
	ex) void method() throws Exception{;}

	- throw : 예외를 발생시킨다
	ex) throw new 예외명();

사용자 정의 예외
class 예외명 extends Exception{
	생성자(){
		super("사용자 정의 예외 메세지");
	}
}



API(Application Programming Interface)
: 어플리케이션 개발에 필요한 것들을 가져다 쓸 수 있게 해주는 중간다리(매개체)
  개발에 필요한 라이브러리들을 사용하는 방법

라이브러리
	: 다른 개발자들이 미리 만들어 놓은 소스코드 덩어리

JAVA API
	- 내부 API
	JDK 설치 시 기본적으로 제공하는 기본 API
	자바로 어플리케이션을 쉽게 구현할 수 있도록 한 라이브러리 집합
	

	- 외부 API
	선배 개발자들이 개발한 패키지 및 클래스들을 의미한다
	보통 JAR파일로 배포하여 자바프로젝트에 build path에 추가하여 사용할 수 있다


	JAR 파일 배포
	배포할 클래스 또는 패키지 우클릭 > Export > JAVA/JAR file 선택
	> Next > destination을 원하는 경로 선택 > Export Java source files...
	체크 > Finish

	외부 API Build Path 추가
	배포된 JAR 파일 다운받기
	프로젝트 우클릭 > Build Path > Configure Build Path >
	Libraries 탭 클릭 > Add External JARs 클릭 >
	저장된 경로의 .jar파일 더블클릭으로 추가 > Apply 클릭
	Order and Exports 탭 클릭 > Select All 클릭 >
	Apply and Close 클릭


Object 클래스
모든 클래스의 최상위 조상 클래스

1. toString()
	Object의 toString()은 참조값을 문자열 형태로 반환한다
	(클래스경로와이름@16진수로된(해쉬코드))
	참조변수를 print()등의 출력메소드로 출력하면 항상 toString()이
	사용된다

2. equals()
	Object의 equals()는 ==과 같다 (참조값 비교)
	문자열 비교는 equals()를 사용해야한다
	String equals()는 재정의 되어 객체가 가진 값을 비교한다
	우리가 만든 클래스 객체를 비교하고 싶다면, 비교 기준을 재정의하여
	사용할 수 있다