day09

0. 복습
배열 : 저장공간의 나열
하나의 타입으로 된 값들만 저장할 수 있는 저장공간의 나열

배열의 선언
1) 배열의 어떤 값이 들어갈 지 알때
	자료형[] 배열명 = {값1, 값2, 값3, ...};

2) 배열에 어떤 값을 넣을지는 모르지만 몇 칸을 만들지는 알 때 선언 방법
	자료형[] 배열명 = new 자료형[칸 수];

3) 배열에 어떤 값을 넣을지도 모르고 몇 칸을 만들지도 모를 때 선언 방법
	자료형[] 배열명 = null;

new : heap 메모리에 할당, 저장공간의 시작주소를 가져온다
null : 주소의 초기값(어떤 주소가 들어갈지 모를 때 사용)


index
배열이 생성할 때 각각의 저장공간에 자동으로 붙여지는 번호
0부터 순차적으로 증가하면서 부여된다.
배열명[인덱스번호]

length
배열을 생성할 때 자동으로 생성되는 저장공간의 수(배열의 길이)
배열의 길이는 한 번 만들어지면 변경할 수 없다

2차원 배열
	: 배열안에 배열

2차원 배열 선언
자료형[][] 배열명 = new 자료형[행][열];
자료형[][] 배열명 = {{값1, 값2, 값3, ...},
		  {값4, 값5, 값6, ...}};


2차원 배열 요소 접근
배열명[행의 인덱스][열의 인덱스]

2차원 배열의 길이
배열명.length : 행의 길이
배열명[행의 인덱스].length : 열의 길이

변수 쓰는 이유 ? 값을 재사용하기 위해서 




1. 메소드
	기능을 저장
	이름뒤에 소괄호()
	단, 키워드 뒤에 소괄호는 메소드가 아니다
	ex) if(조건식){} -> 메소드 아님 !

메소드 선언과 구현(정의)

리턴타입 메소드명(자료형 매개변수명, ...){
	실행할 기능;
	return 리턴값(결과값, 반환값);
}

ex) 두 개의 정수를 더해주는 메소드 선언
	
	매개변수 2개(자료형 정수)
	기능 : 2개의 정수를 더해준다
	반환값 : 2개의 정수를 더한 값
	리턴 타입 : 정수(정수 + 정수)


ex) int add(int num1, int num2){
	int result = num1 + num2;
	return result;
}

리턴타입 : 반환할 값이 있다면 반환값의 자료형을 작성한다. 없다면 void
메소드명 : 기능을 유추가 가능하게 작성, 동사로 작성한다
매개변수 : 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언해준다 (자료형 반드시 작성)
	생략이 가능하다(단, 생략하면 외부에서 값을 받을 수 없다)
실행할 기능 : 메소드의 기능을 구현하는 코드를 작성한다
return : 생략이 가능하며 return이 실행되면 메소드가 종료된다
	리턴값이 있다면 메소드를 사용한 부분을 통채로 리턴'값'으로 본다
	리턴값이 없다면 값이 아니다.

메소드의 정의와 사용
1. 메소드를 정의할 때에는 {}중괄호가 있고 반드시 main메소드 밖에서 정의한다
2. 메소드를 사용할 때에는 {}중괄호가 없고 반드시 main메소드 안에서 사용한다



메소드의 정의 순서
1. 기능을 생각한다(ex 숫자를 더해주는 기능, 문자열 출력하는 기능, ...)
2. 반환 타입이 생각나지 않는다면 우선 void로 작성한다
3. 기능에 알맞은 메소드명을 작성한다(가능하면 동사로 ex)add)
4. 매개변수를 생각한다
5. 실행할 기능을 작성한다
6. 리턴값을 생각한다

+) 메소드의 추가 설명
1. return 타입이 있는 경우 하나의 값으로 볼 수 있다 !
2. 메소드의 기능을 저장하는 것이라고 볼 수 있다(면접때 절대 X)


메소드의 종류

	매개변수	리턴값
1)	  X	  X
2)	  X	  O
3)	  O	  X
4)	  O	  O


메소드를 사용하는 이유
	1. 중복되는 코드 제거
	2. 높은 재사용성
	3. 유지보수에 유리함

메도스의 인수와 매개변수
	1. 메소드의 인수와 매개변수는 반드시 타입이 일치하거나 자동형변환이 가능한
	   타입이어야 한다
	2. return되는 값은 반드시 리턴타입하고 일치하거나 자동형변환이 가능한
	   타입이어야 한다

메소드와 메모리
메소드는 실행되면 메모리의 Stack영역에 메소드 실행에 필요한 저장공간이 생성된다
그 저장공간에는 메소드 안에서 선언한 변수(매개변수, 지역변수)들의 저장공간이 생긴다
메소드의 코드가 모두 실행되어 종료되면 Stack영역에서 해당 메소드의 저장공간이 삭제된다
따라서 지역변수의 저장공간이 사라지므로 지역변수는 재사용이 불가능해진다


오버로딩
같은 클래스 내에서 생성자 또는 메소드를 같은 이름으로 작성하려면
매개변수 타입이나 갯수만 다르게 만든다
반환타입은 오버로딩에 영향을 주지 못한다