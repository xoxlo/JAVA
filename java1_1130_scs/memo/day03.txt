day03

0. 복습

변수
어떤 값을 저장하기 위한 공간

1) 변수의 선언
자료형(데이터의 형태)과 변수명 2가지 정보가 필요하다

자료형 변수명;
ex) int a;

2) 변수에 값을 저장하는 방법
변수명 = 값;
대입연산자(=) : 오른쪽의 값을 왼쪽에 저장한다

ex) a = 10;

int a;
a = 10;

3) 선언과 동시에 초기화
자료형(데이터 형태) 변수명 = 값;
ex) int a = 10;


4) 변수사용 방법
syso(a)    -> 콘솔창에 a에 저장된 값 출력
변수명을 사용한다.

5) 변수명 규칙
	(1) 띄어쓰기가 불가능하다 ex) my age(X)
	(2) 특수문자 사용 불가능 ex) int ##@(X)
	(3) 숫자로 싲이 불가능하다 ex) 1num(X), n1um(O), num1(O)
	(4) 키워드(예약어) 사용 불가능하다
	(5) 웬만하면 의미있는 단어를 사용하자
	(6) 웬만하면 소문자로 시작하자(클래스와 구별하기 위해)

1. 자료형(Data Type) : 값의 종류
기본 자료형 : 정수형, 실수형, 문자형, 논리형
참조 자료형 : 문자열(String), ...

(1) 정수형 자료형
		byte	값
	byte	1	3, -5, ...
	short	2	3, 8, -12, ...
	int	4	5.0, 78, 100, ...
	long	8	3L, 5L, 35L, ...

(2) 실수형 자료형
		byte	값
	float	4	3.1F, 42.5F, ...
	double	8	36.2, 432.23, 24.21, ...

(3) 문자형 char VS 문자열 String
문자 : 작은 따옴표('')로 감싸진 1개의 문자
문자열 : 문자를 나열한 것, 큰 따옴표("")로 감싸진 0개 이상의 문자

문자형 char
		값
char	2byte	'a', 'A', '0', '가', ...

문자열 String(앞글자 대문자)
기본 자료형 : int, float, char, ...
		Stack영역 데이터 저장
참조 자료형 : String, 배열, 클래스, ...
		Heap이라는 영역에 데이터 저장 그 주소를 Stack에 저장

(4) 논리형 boolean
타입			값
boolean		1byte	true(참), false(거짓)

: 예/아니요, 남/여 와 같이 두가지 선택사항만 있는 경우에 가능


※ 상수
- 변하지 않는 값
- 변수와 동일한 저장공간
- 변수명은 대문자와 언더바(_)로 만들어준다(상수를 구별해주기 위해)

ex) final int NUMBER = 1;


제어문자(이스케이프 문자)
- 따옴표안에서 사용되고 미리 예약된 특수한 기능을 하는 문자
- \(역슬래시, 백슬래시)를 사용한다
	
	\n : 줄바꿈
	\t : 일정 간격을 띄어준다(tab)
	\" : 문자열 안에 큰 따옴표를 표현
	\' : 문자열 안에 작은 따옴표를 표현
	\\ : 문자열 안에 역슬래시(\)를 표현
	

출력 메소드

괄호 안에 있는 값을 콘솔창에 출력함

System.out.println();
1) println()
	: 전달된 값을 출력하고 줄바꿈한다

2) print()
	: 전달된 값을 출력하고 줄바꿈이 되지 않는다

3) printf()
	: 형식(서식 format)에 맞는 값을 출력하고 줄바꿈이 되지 않는다

- 출력 메소드 사용 이유
   개발자가 오류를 해결하거나 값을 확인할 때 사용한다

형식지정자(서식문자)
- 반드시 따옴표("") 안에서 저장한다
- 출력 형식을 지정한다
- %로 시작하며 printf()에서 사용한다
- syso("안녕하세요 %d",10)

자료형		형식지정자
정수형		%d
실수형		%f
문자형		%c
문자열		%s

ex) syso("오늘은 %d일차 수업입니다",3)


형변환(Type Casting)
- 자료형을 다른 자료형을 변환하는 것.
- 형변환은 숫자형 자료형 끼리 가능(정수, 실수)
- 문자열형변환 ex) 1 + "" -> 문자열

형변환의 종류
1) 자동 형 변환(Promotion)
	작은 byte의 값을 큰 byte의 변수에 저장하면 자동으로 형변환
	정수 + 실수 = 실수
	- 문자(char)는 정수(int)로 자동 형변환
	자바에서는 문자를 저장할 때 유니코드의 정수값으로 저장한다
	ex) int ga1 = '가';

2) 강제 형 변환(Casting)
	- 큰 byte의 값을 작은 byte변수에 저장하려면 강제로 형변환을 해야한다
	- 실수 -> 정수
	- (바꾸고 싶은 자료형)값;
	- (int) 10.12;

3) 문자열과 관련된 형변환
- 문자열과 다른 자료형을 연결(+)하면 결과는 항상 문자열이 된다
ex) String age = 20 + "살"; -> "20살" (문자열)

- 참조자료형은 기본 자료형으로 형변환이 불가능하다
  그러나 String Integer, Double, Boolean 클래스의 도움을 받아 형변환 가능