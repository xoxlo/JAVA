day08

0. 복습
반복문(for문)
for(초기식; 조건식; 증감식){
	실행할 문장;
}

반복문(while문)
while(조건식){
	조건식의 결과 값이 참일 동안 반복
}

반복문(do~while)
do{

}while(조건식);

while문과 동일하지만 최소 한번은 무조건 실행해야할 때 사용

이중 for문
for문 안에 for문이 있는 구조
for(초기식; 조건식; 증감식){
	for(초기식; 조건식; 증감식){

	}
}


기타제어문
반복문에서 사용한다. 단, break switch문에서도 사용가능하다
break : 즉시 해당 중괄호 영역을 탈출한다
	- if문은 적용되지 않는다 (if문을 감싸고 있는 중괄호 영역을 탈출한다)
	- 아래 코드를 실행하지 않는다
continue : 즉시 다음 반복으로 넘어간다
	- 아래 코드를 실행하지 않는다


1. 배열
배열(Array) : 저장공간의 나열
문자열 : 문자들의 나열

1) 변수를 여러개 선언하면 이름도 여러개 생긴다 -> 각 저장공간을 관리하기가 불편하다
   n칸 배열을 선언하면 저장공간이 여러 개 생기고, 이름은 1개이다 -> 관리하기가 편하다

2) 규칙성이 없는 값이 규칙성을 부여하기 위해서(index)

변수 : [] 하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간
배열 : [][][][] 하나의 타입으로 된 값만 저장할 수 있는 저장공간의 나열

변수는 저장공간을 만들 때 저장공간 하나당 하나의 이름을 붙이고 그 이름을 저장공간으로 사용했다
배열은 하나의 이름에서 index(방번호)를 사용하면 배열 요소에 접근이 가능하다

ex) arr[index] 

배열의 선언
자료형 변수명 = 값; // 변수 만들 때

1) 배열의 어떤 값을 넣을지 알 때 선언방법
	자료형[] 배열명 = {값1, 값2, 값3, 값4, ...};
2) 배열의 어떤 값을 넣을지는 모르지만 몇칸을 만들지는 알 때 선언방법
	자료형[] 배열명 = new 자료형[칸수]
// new 연산자는 뒤에 나오는 것에 맞는 저장공간을 만들어주고 해당 저장공간의 주소값을 가져온다
// 배열을 만들어주고 해당 배열의 주소값을 가져온다
// 즉, new가 만든 배열이라는 저장공간의 주소를 변수에 저장한다


3) 어떤 값을 넣을지도 모르고 몇칸을 만들지도 모를 때 사용방법
자료형[] 배열명 = null;

null : 주소의 초기값(어떤 주소가 들어갈지 모를 때 사용)

배열의 구조

index
배열을 생성할 때 각각의 저장공간에 자동으로 붙여지는 번호
0부터 순차적으로 증가하면서 부여된다
배열의 이름은 한개이기 때문에 이름만으로 배열의 여러 저장공간에 접근할 수 없다
그렇기 때문에 index를 이용하여 각각의 저장공간에 접근한다
배열명[index]로 사용하고

length
배열을 생성할 때 자동으로 생성되는 저장공간의 수(배열의 길이)
배열의 길이는 한 번 만들어지면 변경할 수 없다(length를 상수)
배열명.length


배열의 초기값

자료형	초기값
정수형	0
실수형	0.0
문자형	''
객체형	null

배열의 요소 수정
int num = 10;
num = 20;
syso(num)

2차원 배열
배열 안에 배열

2차원 배열 선언
자료형[][] 김경윤븅쮠쨰뀌 = new 자료형[행][열];
자료형[][] 배열명 = {{값1, 값2, 값3, 값4},
		  {값5, 값6, 값7, 값8}};
* 열의 수는 생략한 후 서로 다른 개수로 열을 만들어서 사용할 수 있지만
  행을 생략하게 되면 배열이 성립되지 않기 때문에 행의 수는 항상 지정해야함

2차원 배열 요소 접근
배열명[행의 인덱스][열의 인덱스]

2차원 배열길이
배열명.length : 행의 길이
배열명[행의 인덱스번호].length : 열의 길이