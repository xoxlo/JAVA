day05

1. 연산자

연산자 우선 순위
1. 최우선 연산자
2. 단항 연산자
3. 산술 연산자
4. 쉬프트 연산자
5. 관계 연산자
6. 논리 연산자
7. 삼항 연산자
8. 대입 연산자

1) 최우선 연산자
	()괄호
	.점(~의, ~안에)

2) 단항 연산자
	+(양수)
	-(음수)
	!(NOT)
	++ : +1
	-- : -1
	전위형 : 해당 라인부터 바로 적용 (++a)
	후위형 : 다음 라인부터 적용 (a++)

3) 산술 연산자
	+
	-
	*
	/
	%(나머지 연산자) -> 짝, 홀수 구별할 때

4) 관계 연산자
	a > b : a가 b보다 크니?
	a < b : a가 b보다 작니?
	a >= b : a가 b이상 이니?
	a <= b : a가 b이하 이니?
	a == b : a가 b랑 같니?
	a != b : a기 b랑 다르니?

5) 논리 연산자
	&&(&) (AND, 논리곱) : 
		A & B : A와 B가 모두 true이면 true
		ex) true & false -> false
		    true & true -> true
	||(|) (OR, 논리합) :
		A | B : A와 B 둘 중 하나라도 true이면 true
		ex) true | false -> true
		    false | false -> false
	^ (XOR, 베타 논리합) :
		A ^ B : A와 B가 다르면 true
		ex) true ^ false -> true
		    true ^ true -> false
		    false ^ false -> false

6) 대입 연산자(=)
	복합 대입 연산자, 누적 연산자
	+= : 더한 값을 대입한다
	ex) int num = 10;
	    num1 += 2; // num1 = num1 + 2, num의 값이 2증가
	-= : 뺀 값을 대입한다
	/= : 나눗셈의 몫의 값을 대입한다
	*= : 곱한 값을 대입한다
	%= : 나눗셈의 나머지 값을 대입한다

7) 비트 연산자
	비트 : 정보량의 최소 단위, 1bit로 표현할 수 있는 숫자 0, 1
	~ a = -a-1
	장점 : 사람의 언어를 컴퓨터의 언어로 바꾸는 과정을 생략하니까 속도가 빠름

	&, |, ^, ~(논리부정, NOT)
	
	& : 두 비트가 모두 1이면 1
	ex) 10 & 11
	    1010(10)
	  & 1011(11)
	  -----------
	    1010(10)

	| : 두 비트 중에서 둘 중 하나라도 1이면 1
	ex) 10 | 11
	    1010(10)
	  | 1011(11)
	  -----------
	    1011(11)
	
	^ : 두 비트가 서로 다르면 1
	ex) 10 ^ 11
	    1010(10)
	  ^ 1011(11)
	  -----------
	    0001(1)

	~ : 0을 1로 1을 0으로 바꿔줌
	~ 10
	~ 1010(10)
	----------
	  0101(5)

	(증명) 컴퓨터는 덧셈만 가능하기 때문에 뺄셈을 구현하려면 음수가 필요함
	비트 중 가장 앞에 있는 비트를 최상위 비트라고 하고
	이 비트는 부호비트로 사용됨(부호비트 0 : 양수, 부호비트 1 : 음수)

	11 + ? = 0

	1011(11)
    +   0101(?) -> -11
    ----------
	0000(0)

8) 쉬프트 연산자(이동)
	<<, >>, <<<
	<<(Left Shift, 좌시프트) : A << B, A를 B만큼 좌로 이동, 2배씩 증가
		이동된 곳은 0으로 채움
	>>(Right Shift, 우시프트) : A >> B, A를 B만큼 우로 이동, 2배씩 감소
		이동된 곳은 부호비트로 채움
조건식 ?
결과가 참 또는 거짓으로 둘 중 하나가 나오는 식
관계연산자 + 논리연산자 사용

9) 삼항 연산자
3개의 피연산자를 가지는 연산자
조건식 ? 참 : 거짓
int result = 10 > 9 ? 10 : 9
단, 참과 거짓 자리에 값만 작성할 수 있다
* 삼항 연산자의 결과를 변수에 대입할 때
변수 = 조건 ? 참 : 거짓


2. 제어문
프로그램의 흐름을 제어하는 것을 의미

1) 조건문 : 조건식을 사용해 참과 거짓의 결과로 프로그램의 흐름을 바꾸는 것
2) 반복문 : 프로그램에서 몇번을 반복해야할 때 사용하는 것
3) 기타 제어문 : 강제로 프로그램의 흐름을 종료하거나 아래 코드는 실행하지 않을 때

조건문
if문, switch문

반복문
for문, while문

기타 제어문
break, continue

조건문(if문)
if(조건식){
	조건식이 참일 경우 실행하는 문장;
}

if문 : 조건식 True면 영역안의 코드가 실행됨
else if문 : 위의 조건식이 거짓이고 else if의 조건식이 참이면 실행
else문 : 위의 조건식들이 모두 거짓이면 실행
* else if문과 else문은 if문 없으면 사용 불가

if(조건식1){
	조건식이 참일 경우 실행하는 문장;
}else if(조건식2){
	조건식1이 거짓이고, 조건식2가 참일때 실행하는 문장;
}else if(조건식3){
	......
}else{
	위에 있는 조건식이 모두 거짓일 때 실행할 문장;

if(조건식){

}if(조건식){
	
}